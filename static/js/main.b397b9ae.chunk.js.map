{"version":3,"sources":["LinkGroup.js","constants.js","functions/_reconstituteTree.js","functions/_calculateExpand.js","functions/_calculateCollapse.js","functions/_calculateCut.js","functions/_calculatePaste.js","reducer.js","fakeData.js","functions/_normalizeTree.js","store.js","targetSpec.js","actions.js","TreeNode.js","sourceSpec.js","NodeGroup.js","Tree.js","SvgCanvas.js","App.js","index.js"],"names":["toStyle","_ref","source","target","key","concat","data","id","style","sourceX","x","sourceY","y","targetX","spring","presets","gentle","targetY","lerp","isEntering","isLeaving","willEnter","_ref2","willLeave","_ref3","stiff","LinkGroup","_ref4","links","rest","Object","objectWithoutProperties","react_default","a","createElement","react_motion","styles","map","interpolated","assign","className","_ref5","_ref5$style","opacity","x1","y1","x2","y2","tree","d3","size","nodeSize","NODE_WIDTH","NODE_HEIGHT","exists","v","makeTree","normalizedTree","rootId","node","_children","children","objectSpread","filter","f","EMPTY_ARRAY","freeze","EMPTY_OBJECT","collapse","isExpanded","getNodesById","localState","nodes","getRootId","createSelector","getTree","root","reconstituteTree","names","fakeData","mapping","_root","queue","undefined","value","childTuples","array","zip","times","constant","pop","_value","_value2","slicedToArray","parent","_value2$","toConsumableArray","normalizeTree","uniqueId","name","sample","createStore","changes","state","arguments","length","action","type","payload","get","defineProperty","calculateExpand","reduce","r","recur","nodeId","reject","isUndefined","flatMap","calculateCollapse","calculateCut","_objectSpread2","_ref2$payload","cutId","targetId","cutNode","uniq","calculatePaste","initialState","targetSpec","drop","props","monitor","component","getItem","store","dispatch","setTimeout","pasteAction","StandardNode","React","memo","text","hasChildren","Fragment","classNames","has-child","node-body","ry","consts","rx","width","lengthAdjust","textAnchor","alignmentBaseline","DraggedNode","flow","DragSource","beginDrag","connect","connectDragSource","dragSource","isDragging","DropTarget","connectDropTarget","dropTarget","isOver","_ref2$isDragged","isDragged","handleDoubleClick","onDoubleClick","data-nodeid","data-isopen","transform","console","log","DragLayer","item","_ref6","_ref6$style","src_TreeNode","TreeView","layout","translation","CANVAS_WIDTH","src_NodeGroup","descendants","Tree","e","stopPropagation","elementData","currentTarget","dataset","isOpen","_this","expand","treeData","this","d","Tree_TreeView","PureComponent","collapseAction","expandAction","SvgCanvas","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setViewer","el","viewer","handleMouseMove","wrapped","SVGViewer","point","setState","dragPreview","svg","viewWidth","Math","max","document","documentElement","clientWidth","window","innerWidth","pan","_this$props","react_svg_pan_zoom_min","height","SVGBackground","ref","onMouseMove","toolbarPosition","POSITION_LEFT","src_Tree","handleNodeAction","compose","DragDropContext","MouseBackend","App","es","src_SvgCanvas","Component","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.b397b9ae.chunk.js","sourcesContent":["import React from \"react\";\nimport { presets, spring, TransitionMotion } from \"react-motion\";\nimport map from \"lodash/fp/map\";\n\nconst toStyle = ({ source, target }) => {\n  return {\n    key: `${source.data.id}->${target.data.id}`,\n    data: { source, target },\n    //final style is a line between source and target\n    style: {\n      sourceX: source.x,\n      sourceY: source.y,\n      targetX: spring(target.x, presets.gentle),\n      targetY: spring(target.y, presets.gentle),\n      lerp: spring(1, presets.gentle),\n      isEntering: 0,\n      isLeaving: 0\n    }\n  };\n};\n\nconst willEnter = ({ data: { source } }) => ({\n  // Life starts as a point at source.x, source.y\n  sourceX: source.x,\n  sourceY: source.y,\n  targetX: source.x,\n  targetY: source.y,\n  lerp: 0,\n  isEntering: 1,\n  isLeaving: 0\n});\n\nconst willLeave = ({ data: { source } }) => ({\n  // Life ends (eventually) back as a point at source.x, source.y\n  sourceX: source.x,\n  sourceY: source.y,\n  targetX: spring(source.x, presets.stiff),\n  targetY: spring(source.y, presets.stiff),\n  lerp: spring(0, presets.stiff),\n  isEntering: 0,\n  isLeaving: 1\n});\n/**\n * The main reason for this group is to animate the list of links\n * (the link group) when things change on the tree. I used line\n * here for simplicity but some really nice charts can be made using\n * path too.\n */\nexport default ({ links, ...rest }) => {\n  return (\n    <TransitionMotion\n      willEnter={willEnter}\n      willLeave={willLeave}\n      styles={map(toStyle, links)}\n    >\n      {interpolated => (\n        <g className=\"link\" {...rest}>\n          {map(\n            ({\n              style: {\n                lerp,\n                sourceX,\n                sourceY,\n                targetX,\n                targetY,\n                isEntering,\n                isLeaving\n              },\n              key\n            }) => (\n              <line\n                key={isEntering ? `E-${key}` : isLeaving ? `L-${key}` : key}\n                opacity={lerp}\n                className=\"link\"\n                x1={sourceX}\n                y1={sourceY}\n                x2={targetX}\n                y2={targetY}\n              />\n            ),\n            interpolated\n          )}\n        </g>\n      )}\n    </TransitionMotion>\n  );\n};\n","import * as d3 from \"d3\";\n\nexport const CANVAS_HEIGHT = 5000;\nexport const CANVAS_WIDTH = 5000;\nexport const VERTICAL_SPACING = 75;\nexport const HORIZONTAL_SPACING = 30;\nexport const NODE_HEIGHT = 65;\nexport const NODE_WIDTH = 125;\nexport const tree = d3\n  .tree()\n  .size([CANVAS_HEIGHT, CANVAS_WIDTH])\n  .nodeSize([NODE_WIDTH + HORIZONTAL_SPACING, NODE_HEIGHT + VERTICAL_SPACING]);\n","import map from \"lodash/fp/map\";\nimport filter from \"lodash/fp/filter\";\n\nconst exists = v => !!v;\n\n/**\n * Reconstitutes a normalized tree into a recursive, structured\n * representation which D3 consumes.\n *\n * @param {*} normalizedTree\n * @param {*} rootId\n */\nconst makeTree = (normalizedTree, rootId) => {\n  const f = node => {\n    if (!node) {\n      return undefined;\n    }\n\n    const { _children, children, ...rest } = node;\n    return {\n      ...rest,\n      _children: filter(\n        exists,\n        map(id => makeTree(normalizedTree, id), _children)\n      ),\n      children: filter(\n        exists,\n        map(id => makeTree(normalizedTree, id), children)\n      )\n    };\n  };\n\n  return f(normalizedTree[rootId]);\n};\n\nexport default makeTree;\n","import get from \"lodash/fp/get\";\nimport size from \"lodash/fp/size\";\n\nconst EMPTY_ARRAY = Object.freeze([]);\nconst EMPTY_OBJECT = Object.freeze({});\n\n/**\n * Calculates store deltas for an expand action\n */\nexport default ({ nodes }, { payload: id }) => {\n  const node = get(id, nodes);\n  const children = node._children;\n  if (node.isExpanded || size(children) === 0) {\n    return EMPTY_OBJECT;\n  }\n  return {\n    nodes: {\n      ...nodes,\n      [id]: { ...node, children, _children: EMPTY_ARRAY, isExpanded: true }\n    }\n  };\n};\n","import flatMap from \"lodash/fp/flatMap\";\nimport reject from \"lodash/fp/reject\";\nimport get from \"lodash/fp/get\";\nimport reduce from \"lodash/fp/reduce\";\nimport size from \"lodash/fp/size\";\nimport isUndefined from \"lodash/fp/isUndefined\";\n\nconst EMPTY_ARRAY = Object.freeze([]);\nconst EMPTY_OBJECT = Object.freeze({});\n\nconst collapse = node => ({\n  ...node,\n  isExpanded: false,\n  _children: node.children,\n  children: EMPTY_ARRAY\n});\n\n/**\n * Calculates store deltas for an collapse action.\n */\nexport default ({ nodes }, { payload: id }) => {\n  const recur = nodeId => {\n    const node = get(nodeId, nodes);\n    const { children } = node;\n    if (!node.isExpanded || size(node.children) === 0) {\n      return EMPTY_OBJECT;\n    }\n\n    return [collapse(node), ...reject(isUndefined, flatMap(recur, children))];\n  };\n\n  return {\n    nodes: {\n      ...nodes,\n      isExpanded: false,\n      ...reduce((r, v) => ({ ...r, [v.id]: v }), EMPTY_OBJECT, recur(id))\n    }\n  };\n};\n","import reject from \"lodash/fp/reject\";\n\nconst EMPTY_OBJECT = Object.freeze({});\n/**\n * Calculates the state change when a node is moved from one parent to another\n */\nexport default ({ nodes }, { payload: id }) => {\n  const { [id]: cutNode } = nodes;\n  const parent = nodes[cutNode.parent];\n\n  if (!(parent && id)) {\n    return EMPTY_OBJECT;\n  }\n\n  return {\n    nodes: {\n      ...nodes,\n      [parent.id]: {\n        ...parent,\n        children: reject(v => v === id, parent.children)\n      }\n    }\n  };\n};\n","import uniq from \"lodash/fp/uniq\";\nconst EMPTY_OBJECT = Object.freeze({});\n/**\n * Calculates the state change when a node is moved from one parent to another\n */\nexport default ({ nodes }, { payload: { cutId, targetId } }) => {\n  const { [cutId]: cutNode } = nodes;\n  const parent = nodes[targetId];\n\n  if (!(parent && cutId)) {\n    return EMPTY_OBJECT;\n  }\n\n  return {\n    nodes: {\n      ...nodes,\n      [cutId]: { ...cutNode, parent: targetId },\n      [targetId]: {\n        ...parent,\n        children: uniq([...parent.children, cutId])\n      }\n    }\n  };\n};\n","import { createSelector } from \"reselect\";\nimport {\n  calculateExpand,\n  calculateCollapse,\n  calculateCut,\n  calculatePaste,\n  reconstituteTree\n} from \"./functions\";\n\nexport default (state = {}, action) => {\n  let changes;\n  switch (action.type) {\n    default:\n      return state;\n\n    case \"TREE/EXPAND_NODE\":\n      changes = calculateExpand(state, action);\n      break;\n\n    case \"TREE/COLLAPSE_NODE\":\n      changes = calculateCollapse(state, action);\n      break;\n\n    case \"TREE/CUT_NODE\":\n      changes = calculateCut(state, action);\n      break;\n\n    case \"TREE/PASTE_NODE\":\n      changes = calculatePaste(state, action);\n      break;\n  }\n  return { ...state, ...changes };\n};\n\nexport const getNodesById = localState => localState.nodes;\nexport const getRootId = createSelector(\n  [getNodesById],\n  map => map[\"_root\"]\n);\nexport const getTree = createSelector(\n  [getNodesById, getRootId],\n  (nodes, root) => reconstituteTree(nodes, root)\n);\n","import uniqueId from \"lodash/fp/uniqueId\";\nimport sample from \"lodash/fp/sample\";\nimport { normalizeTree } from \"./functions\";\n\nconst names = [\n  \"Aleta Akridge\",\n  \"Christy Wheaton\",\n  \"Ching Whittle\",\n  \"Galen Lechner\",\n  \"Hettie Shimkus\",\n  \"Tai Gauna\",\n  \"Fredric Dubinsky\",\n  \"Reda Bialek\",\n  \"Esta Roller\",\n  \"Cordie Lisenby\",\n  \"Cinda Pope\",\n  \"Andera Ullery\",\n  \"Lorenza Duet\",\n  \"Dorinda Wygant\",\n  \"Freddie Chao\",\n  \"Rosalina Mooney\",\n  \"Carmelo Younger\",\n  \"Marilyn Arend\",\n  \"Corinna Orenstein\",\n  \"Sigrid Plumb\",\n  \"Lauryn Briley\",\n  \"Fredericka Stanbery\",\n  \"Alisia Moy\",\n  \"Classie Scuderi\",\n  \"Tonya Faris\",\n  \"Jacquiline Tarnowski\",\n  \"Kylee Tapp\",\n  \"Thuy Elliston\",\n  \"Usha Hassett\",\n  \"Sherly Mullen\",\n  \"Randy Jessup\",\n  \"Tommy Loy\",\n  \"Bill Kramer\",\n  \"Steve Johnson\",\n  \"Lauren Welch\",\n  \"Connie Muldowski\",\n  \"Susan Aran\",\n  \"Kuldeep Prashant\"\n];\nexport default {\n  nodes: normalizeTree({\n    id: `${uniqueId()}`,\n    name: sample(names),\n    children: [\n      {\n        id: `${uniqueId()}`,\n        name: sample(names),\n        children: [\n          {\n            id: `${uniqueId()}`,\n            name: sample(names),\n            children: [\n              {\n                id: `${uniqueId()}`,\n                name: sample(names)\n              },\n              {\n                id: `${uniqueId()}`,\n                name: sample(names)\n              }\n            ]\n          },\n          {\n            id: `${uniqueId()}`,\n            name: sample(names),\n            children: [\n              {\n                id: `${uniqueId()}`,\n                name: sample(names),\n                children: [\n                  {\n                    id: `${uniqueId()}`,\n                    name: sample(names),\n                    children: [\n                      {\n                        id: `${uniqueId()}`,\n                        name: sample(names)\n                      },\n                      {\n                        id: `${uniqueId()}`,\n                        name: sample(names),\n                        children: [\n                          {\n                            id: `${uniqueId()}`,\n                            name: sample(names)\n                          },\n                          {\n                            id: `${uniqueId()}`,\n                            name: sample(names)\n                          },\n                          {\n                            id: `${uniqueId()}`,\n                            name: sample(names)\n                          },\n                          {\n                            id: `${uniqueId()}`,\n                            name: sample(names)\n                          }\n                        ]\n                      },\n                      {\n                        id: `${uniqueId()}`,\n                        name: sample(names)\n                      },\n                      {\n                        id: `${uniqueId()}`,\n                        name: sample(names),\n                        children: [\n                          {\n                            id: `${uniqueId()}`,\n                            name: sample(names)\n                          },\n                          {\n                            id: `${uniqueId()}`,\n                            name: sample(names)\n                          },\n                          {\n                            id: `${uniqueId()}`,\n                            name: sample(names)\n                          },\n                          {\n                            id: `${uniqueId()}`,\n                            name: sample(names)\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    id: `${uniqueId()}`,\n                    name: sample(names)\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      {\n        id: `${uniqueId()}`,\n        name: sample(names),\n        children: [\n          {\n            id: `${uniqueId()}`,\n            name: sample(names),\n            children: [\n              {\n                id: `${uniqueId()}`,\n                name: sample(names)\n              },\n              {\n                id: `${uniqueId()}`,\n                name: sample(names)\n              }\n            ]\n          }\n        ]\n      },\n      {\n        id: `${uniqueId()}`,\n        name: sample(names),\n        children: []\n      },\n      {\n        id: `${uniqueId()}`,\n        name: sample(names),\n        children: []\n      }\n    ]\n  })\n};\n","import constant from \"lodash/fp/constant\";\nimport size from \"lodash/fp/size\";\nimport times from \"lodash/fp/times\";\nimport zip from \"lodash/fp/zip\";\nimport map from \"lodash/fp/map\";\n/**\n * Takes the recursive, structured representation of the tree and turns it\n * into a shallow map by node id with references to child ids. It's really\n * more beneficial to store it in redux in this manner for several reasons.\n */\nexport default root => {\n  const mapping = { _root: root.id };\n  let queue = [[undefined, root]];\n  let value = undefined;\n  const childTuples = (id, array) =>\n    zip(times(constant(id), size(array)), array);\n\n  while ((value = queue.pop())) {\n    const [parent, { id, _children, children, ...rest }] = value;\n    if (size(children) > 0) {\n      queue = [...queue, ...childTuples(id, children)];\n    } else if (size(_children > 0)) {\n      queue = [...queue, ...childTuples(id, _children)];\n    }\n\n    mapping[id] = {\n      ...rest,\n      id,\n      parent,\n      isExpanded: children ? size(children) > 0 : false,\n      children: map(\"id\", children),\n      _children: map(\"id\", _children)\n    };\n  }\n\n  return mapping;\n};\n","import { createStore } from \"redux\";\nimport treeReducer from \"./reducer\";\nimport initialState from \"./fakeData\";\nexport default createStore(treeReducer, initialState);\n","import store from \"./store\";\nimport { cutAction, pasteAction } from \"./actions\";\n\nexport default {\n  drop(props, monitor, component) {\n    //because each node is both a source and a target.\n    if (props.node.id === monitor.getItem().node.id) {\n      return;\n    }\n    const cutId = monitor.getItem().node.id;\n    const targetId = props.node.id;\n    store.dispatch(cutAction(cutId));\n    setTimeout(() => {\n      store.dispatch(pasteAction(cutId, targetId));\n    }, 0);\n  }\n};\n","export const collapseAction = nodeId => ({\n  type: \"TREE/COLLAPSE_NODE\",\n  payload: nodeId\n});\n\nexport const expandAction = nodeId => ({\n  type: \"TREE/EXPAND_NODE\",\n  payload: nodeId\n});\n\nexport const cutAction = id => ({\n  type: \"TREE/CUT_NODE\",\n  payload: id\n});\n\nexport const pasteAction = (cutId, targetId) => ({\n  type: \"TREE/PASTE_NODE\",\n  payload: { cutId, targetId }\n});\n","import React from \"react\";\nimport * as consts from \"./constants\";\nimport size from \"lodash/fp/size\";\nimport classNames from \"classnames/bind\";\nimport flow from \"lodash/fp/flow\";\nimport { DragSource, DropTarget } from \"react-dnd\";\nimport targetSpec from \"./targetSpec\";\nimport sourceSpec from \"./sourceSpec\";\n\nconst targetCollector = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver()\n});\n\nconst sourceCollector = (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging()\n});\n/**\n * The view for the standard node. This component is memoized\n * because it should really never change except unless it's childless\n * and a child is added or has children that are all removed. Most\n * of the location and other stuff is handled by TreeNode\n */\nconst StandardNode = React.memo(({ text, hasChildren }) => (\n  <>\n    <ellipse\n      className={classNames({\n        \"has-child\": hasChildren,\n        \"node-body\": true\n      })}\n      ry={consts.NODE_HEIGHT / 2}\n      rx={consts.NODE_WIDTH / 2}\n    />\n    <rect\n      className=\"node-txt-background\"\n      x=\"-1.2%\"\n      y=\"-.25%\"\n      width={consts.NODE_WIDTH}\n    />\n    <text lengthAdjust=\"spacing\" className=\"node-txt\">\n      <tspan textAnchor=\"middle\" alignmentBaseline=\"middle\">\n        {text}\n      </tspan>\n    </text>\n  </>\n));\nconst DraggedNode = React.memo(() => (\n  <ellipse\n    className=\"node-dragging\"\n    ry={consts.NODE_HEIGHT / 2}\n    rx={consts.NODE_WIDTH / 2}\n  />\n));\n\nconst hasChildren = node => {\n  return size(node.children) + size(node._children) > 0;\n};\n\n/**\n *\n * The TreeNode is a heavy, pure wrapper around a simple fragment of SVG which\n * adds drag and drop function and also translates the memoized SVG around\n * the canvas (when being animated). Splitting the memoized SVG from the wrapper\n * allows us to essentially just change the translation and style attributes of th\n * surrounding group to change the nodes.\n *\n * @param {*} param0\n */\nconst TreeNode = ({\n  x,\n  y,\n  node,\n  lerp,\n  isDragged = false,\n  handleDoubleClick,\n  connectDragSource,\n  connectDropTarget\n}) => {\n  return connectDropTarget(\n    connectDragSource(\n      <g\n        id={node.id}\n        onDoubleClick={handleDoubleClick}\n        data-nodeid={`${node.id}`}\n        data-isopen={node.isExpanded}\n        opacity={lerp}\n        transform={`translate(${x},${y}) scale(${lerp})`}\n      >\n        {isDragged ? (\n          <DraggedNode />\n        ) : (\n          <StandardNode text={node.name} hasChildren={hasChildren(node)} />\n        )}\n      </g>\n    )\n  );\n};\n\nexport default flow(\n  DragSource(\"node\", sourceSpec, sourceCollector),\n  DropTarget(\"node\", targetSpec, targetCollector)\n)(TreeNode);\n","export default {\n  beginDrag(props) {\n    return { node: props.node };\n  }\n};\n","import map from \"lodash/fp/map\";\nimport TreeNode from \"./TreeNode\";\nimport { TransitionMotion, spring, presets } from \"react-motion\";\nimport React from \"react\";\nimport { DragLayer } from \"react-dnd\";\n\nconst willEnter = style => {\n  console.log(\"entering -> \", style.key);\n  const {\n    data: { parent }\n  } = style;\n  //start life on expand at your parent's coordinates (root starts at 0,0).\n  const [x, y] = parent ? [parent.x, parent.y] : [0, 0];\n  return { x, y, lerp: 0.0, isEntering: 1, isLeaving: 0 };\n};\n\nconst willLeave = style => {\n  console.log(\"leaving -> \", style.key);\n  const {\n    data: { parent }\n  } = style;\n  //end life back at your parent's coordinates.\n  const [x, y] = parent ? [parent.x, parent.y] : [0, 0];\n  return {\n    x: spring(x, presets.gentle),\n    y: spring(y, presets.gentle),\n    // generic lerp sequence used for whatever: opacity, scale, etc.\n    lerp: spring(0, presets.gentle),\n    // when drag and drop occurs then the nodes get removed and re-added\n    // and are using the same id which confuses react so we use this\n    // to mark the leaving versions as tmp.\n    isEntering: 0,\n    isLeaving: 1\n  };\n};\nconst toStyle = node => {\n  return {\n    data: { ...node.data, parent: node.parent },\n    key: node.data.id,\n    // eventually get to your coordinates specified by D3 (from the parent)\n    // and lerp of 1.0.\n    style: {\n      x: spring(node.x, presets.gentle),\n      y: spring(node.y, presets.gentle),\n      lerp: spring(1, presets.gentle),\n      isEntering: 0,\n      isLeaving: 0\n    }\n  };\n};\n/**\n * The main reason for this component is to introduce a list component to\n * implement the animations.\n * @param {*} param0\n */\nconst NodeGroup = ({ nodes, handleDoubleClick, item, isDragging, ...rest }) => (\n  <TransitionMotion\n    willEnter={willEnter}\n    willLeave={willLeave}\n    styles={map(toStyle, nodes)}\n  >\n    {interpolated => (\n      <g {...rest}>\n        {map(\n          ({ style: { x, y, lerp, isEntering, isLeaving }, key, data }) => (\n            <TreeNode\n              x={x}\n              y={y}\n              lerp={lerp}\n              key={isEntering ? `E-${key}` : isLeaving ? `L-${key}` : key}\n              node={data}\n              isDragged={isDragging && item.node.id === key}\n              handleDoubleClick={handleDoubleClick}\n            />\n          ),\n          interpolated\n        )}\n      </g>\n    )}\n  </TransitionMotion>\n);\n\nexport default DragLayer(monitor => ({\n  item: monitor.getItem(),\n  isDragging: monitor.isDragging()\n}))(NodeGroup);\n","import * as d3 from \"d3\";\nimport React from \"react\";\nimport LinkGroup from \"./LinkGroup\";\nimport NodeGroup from \"./NodeGroup\";\nimport { tree, NODE_HEIGHT, CANVAS_WIDTH } from \"./constants\";\nimport { getTree } from \"./reducer\";\nimport { connect } from \"react-redux\";\nimport { collapseAction, expandAction } from \"./actions\";\n\nconst TreeView = ({ root, layout, handleDoubleClick }) => {\n  const translation = `translate(${CANVAS_WIDTH / 2},${NODE_HEIGHT})`;\n  return (\n    <>\n      <LinkGroup key=\"links\" transform={translation} links={root.links()} />\n      <NodeGroup\n        key=\"nodes\"\n        transform={translation}\n        nodes={layout.descendants()}\n        handleDoubleClick={handleDoubleClick}\n      />\n    </>\n  );\n};\n\n/**\n * This component is where the layout for the treedata is calculated\n * using D3 and passed into the tree structure. A move causes the tree\n * data to change causing this to redraw.\n */\nclass Tree extends React.PureComponent {\n  /**\n   * Double clicking a node causes it to expand or collapse.\n   */\n  handleDoubleClick = e => {\n    e.stopPropagation();\n    const elementData = e.currentTarget.dataset;\n    const id = elementData[\"nodeid\"];\n    const isOpen = elementData[\"isopen\"];\n    if (!id || isOpen === undefined) {\n      return;\n    }\n\n    if (isOpen === \"true\") {\n      this.props.collapse(id);\n    } else {\n      this.props.expand(id);\n    }\n  };\n\n  render() {\n    const { treeData } = this.props;\n    const root = d3.hierarchy(treeData, d => d.children);\n    const layout = tree(root);\n    return (\n      <TreeView\n        root={root}\n        layout={layout}\n        handleDoubleClick={this.handleDoubleClick}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    treeData: getTree(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  collapse: nodeId => dispatch(collapseAction(nodeId)),\n  expand: nodeId => dispatch(expandAction(nodeId))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Tree);\n","import React from \"react\";\nimport { ReactSVGPanZoom, POSITION_LEFT } from \"react-svg-pan-zoom\";\nimport Tree from \"./Tree\";\nimport TreeNode from \"./TreeNode\";\nimport { compose } from \"redux\";\nimport { DragDropContext, DragLayer } from \"react-dnd\";\nimport MouseBackend from \"react-dnd-mouse-backend\";\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from \"./constants\";\n\nclass SvgCanvas extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dragPreview: undefined\n    };\n  }\n  setViewer = el => (this.viewer = el);\n\n  componentDidMount() {\n    var viewWidth = Math.max(\n      document.documentElement.clientWidth,\n      window.innerWidth || 0\n    );\n    this.viewer.pan(-(CANVAS_WIDTH - viewWidth) / 2, 0);\n  }\n\n  handleMouseMove = wrapped => {\n    // we add and remove the callback in the render method so this\n    // is not constantly called, only when dragging is occurring.\n    const { SVGViewer, point } = wrapped;\n    this.setState({\n      dragPreview: {\n        svg: SVGViewer,\n        point\n      }\n    });\n  };\n\n  render() {\n    const { isDragging, item } = this.props;\n    const { dragPreview } = this.state;\n    // ReactSVGPanZoom requires its one and only child be a real svg element\n    // so this component always gets a little cumbersome. This component\n    // is also a DragLayer monitor because of dragPreview. This allows the\n    // drag preview to follow the mouse coordinates without redrawing the\n    // entire tree. React DND using an HTML5 backend (react-dnd-html5-backend)\n    // gives you a pretty good preview for free. Because we are using SVG components\n    // we must use the MouseBackend and we have to do this manually.\n    return (\n      <ReactSVGPanZoom\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        SVGBackground={\"white\"}\n        style={{ width: \"100vw\", height: \"100vh\" }}\n        ref={this.setViewer}\n        onMouseMove={isDragging ? this.handleMouseMove : undefined}\n        toolbarPosition={POSITION_LEFT}\n      >\n        <svg className=\"canvas\" width={CANVAS_WIDTH} height={CANVAS_HEIGHT}>\n          <Tree handleDoubleClick={this.handleNodeAction} />\n          {dragPreview && item && (\n            <TreeNode\n              x={dragPreview.point.x}\n              y={dragPreview.point.y}\n              node={item.node}\n              lerp={1}\n            />\n          )}\n        </svg>\n      </ReactSVGPanZoom>\n    );\n  }\n}\nexport default compose(\n  // Provides a context for the DnD stuff. We have to use the mouse backend\n  // because of the SVG components.\n  DragDropContext(MouseBackend),\n  DragLayer(monitor => ({\n    item: monitor.getItem(),\n    isDragging: monitor.isDragging()\n  }))\n)(SvgCanvas);\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport SvgCanvas from \"./SvgCanvas\";\nimport \"./App.css\";\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={store}>\n          <SvgCanvas />\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}